import java.io.File
import java.io.IOException

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ (—Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç—ã)
fun caesarCipher(text: String, shift: Int, encrypt: Boolean = true): String {
    val engAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    val rusAlphabet = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"

    val lowerEngAlphabet = engAlphabet.lowercase()
    val lowerRusAlphabet = rusAlphabet.lowercase()

    val shiftDirection = if (encrypt) shift else -shift

    return text.map { char ->
        when {
            char in engAlphabet -> shiftChar(char, engAlphabet, shiftDirection)
            char in lowerEngAlphabet -> shiftChar(char, lowerEngAlphabet, shiftDirection)
            char in rusAlphabet -> shiftChar(char, rusAlphabet, shiftDirection)
            char in lowerRusAlphabet -> shiftChar(char, lowerRusAlphabet, shiftDirection)
            else -> char // –ù–µ –º–µ–Ω—è–µ–º –∑–Ω–∞–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
        }
    }.joinToString("")
}

// –°–¥–≤–∏–≥ —Å–∏–º–≤–æ–ª–∞ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–µ
fun shiftChar(char: Char, alphabet: String, shift: Int): Char {
    val newIndex = (alphabet.indexOf(char) + shift + alphabet.length) % alphabet.length
    return alphabet[newIndex]
}

// –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
fun readFile(filePath: String): String? {
    return try {
        File(filePath).readText(Charsets.UTF_8)
    } catch (e: IOException) {
        println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${e.message}")
        null
    }
}

// –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
fun writeFile(filePath: String, content: String) {
    try {
        File(filePath).writeText(content, Charsets.UTF_8)
    } catch (e: IOException) {
        println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: ${e.message}")
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–∞
fun isValidKey(key: Int): Boolean = key >= 0

fun main() {
    while (true) {
        println("\nüîπ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
        println(" 1Ô∏è‚É£ - –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ")
        println(" 2Ô∏è‚É£ - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞")
        println(" 3Ô∏è‚É£ - Brute force")
        println(" 4Ô∏è‚É£ - –í—ã—Ö–æ–¥")

        when (readLine()) {
            "1" -> {
                println("üìÑ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–∏–ª–∏ !–≤—ã—Ö–æ–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
                val inputFile = readLine()
                if (inputFile == "!–≤—ã—Ö–æ–¥") continue

                println("üìÇ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:")
                val outputFile = readLine()
                if (outputFile == "!–≤—ã—Ö–æ–¥") continue

                println("üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (—Å–¥–≤–∏–≥):")
                val shift = readLine()?.toIntOrNull()
                if (shift == null || !isValidKey(shift)) {
                    println("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á.")
                    continue
                }

                val inputText = readFile(inputFile!!)
                if (inputText != null) {
                    val encryptedText = caesarCipher(inputText, shift, encrypt = true)
                    writeFile(outputFile!!, encryptedText)
                    println("‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                }
            }
            "2" -> {
                println("üìÑ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É (–∏–ª–∏ !–≤—ã—Ö–æ–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
                val inputFile = readLine()
                if (inputFile == "!–≤—ã—Ö–æ–¥") continue

                println("üìÇ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:")
                val outputFile = readLine()
                if (outputFile == "!–≤—ã—Ö–æ–¥") continue

                println("üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (—Å–¥–≤–∏–≥):")
                val shift = readLine()?.toIntOrNull()
                if (shift == null || !isValidKey(shift)) {
                    println("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á.")
                    continue
                }

                val inputText = readFile(inputFile!!)
                if (inputText != null) {
                    val decryptedText = caesarCipher(inputText, shift, encrypt = false)
                    writeFile(outputFile!!, decryptedText)
                    println("‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                }
            }
            "3" -> {
                println("üìÑ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è brute force (–∏–ª–∏ !–≤—ã—Ö–æ–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
                val inputFile = readLine()
                if (inputFile == "!–≤—ã—Ö–æ–¥") continue

                val inputText = readFile(inputFile!!)
                if (inputText != null) {
                    println("üîé –ü–æ–ø—ã—Ç–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏...")
                    for (shift in 0 until 33) { // 33 —Å–∏–º–≤–æ–ª–∞ –≤ —Ä—É—Å—Å–∫–æ–º –∞–ª—Ñ–∞–≤–∏—Ç–µ
                        val decryptedText = caesarCipher(inputText, shift, encrypt = false)
                        println("üîë –ö–ª—é—á: $shift - $decryptedText")
                    }
                }
            }
            "4" -> {
                println("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                return
            }
            else -> println("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        }
    }
}
